---
openapi: 3.0.3
info:
  title: KomMonei Antd Monorepo
  description: Quarkus monorepo demonstrating Panache Mongo REST server with AntD
    UI client
  contact:
    name: Paulo Chaves
    url: https://opchaves.com
    email: opaulochaves@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
tags:
- name: activities
paths:
  /api/activities:
    get:
      tags:
      - activities
      summary: List all activities for the current user
      responses:
        "200":
          description: List of activities for the current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityDTO"
              examples:
                activities:
                  value: |-
                    [  {
                        "id": "5f9b3b7b7f4b3b1b3c7b3b7b",
                        "name": "Activity 1",
                        "description": "Description 1",
                        "price": 0.0,
                        "paid": true,
                        type": "income",
                        "category": "Category 1",
                        "userId": "5f9b3b7b7f4b3b1b3c7b3b7b",
                        "handledAt": "2024-05-30T00:00:00Z",
                        "createdAt": "2024-05-30T00:00:00Z",
                        "updatedAt": "2024-05-30T00:00:00Z"
                      }
                    ]
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: 401
                    message: Unauthorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityDTO"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/activities/all:
    get:
      tags:
      - activities
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityDTO"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/activities/{id}:
    get:
      tags:
      - activities
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityDTO"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - activities
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityDTO"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityDTO"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/auth/login:
    post:
      tags:
      - Auth Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/auth/register:
    post:
      tags:
      - Auth Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /api/users/me:
    get:
      tags:
      - User Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/users/{id}:
    get:
      tags:
      - User Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
components:
  schemas:
    ActivityDTO:
      description: Activity input data
      required:
      - name
      - type
      - category
      type: object
      properties:
        id:
          description: Activity Object Id
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          pattern: \S
          type: string
        description:
          type: string
        price:
          format: double
          default: 0.0
          minimum: 0.01
          type: number
        paid:
          default: false
          type: boolean
        type:
          $ref: "#/components/schemas/ActivityType"
        category:
          pattern: \S
          type: string
        userId:
          description: User Object Id
          type: string
          example: 507f1f77bcf86cd799439011
        handledAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
        createdAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
        updatedAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
    ActivityType:
      enum:
      - income
      - expense
      type: string
    AuthRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          description: User email
          pattern: \S
          type: string
          example: jonhdoe@example.com
        password:
          description: "Password must have at least 10 characters, one uppercase letter,\
            \ one lowercase letter, one number and one special character"
          minLength: 10
          pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{10,}$"
          type: string
          example: ab39cD-$d22
    AuthResponse:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          example: eyJhbGci...
    ErrorMessage:
      description: Error message
      type: object
      properties:
        path:
          description: Path to the field that caused the error
          type: string
        message:
          description: Error message
          type: string
    ErrorResponse:
      description: Error response
      type: object
      properties:
        errorId:
          description: Unique error identifier
          type: string
        errors:
          description: List of error messages
          type: array
          items:
            $ref: "#/components/schemas/ErrorMessage"
    ErrorResponse1:
      required:
      - message
      - status
      type: object
      properties:
        message:
          description: Error message
          type: string
          example: Email already taken
        status:
          format: int32
          description: HTTP status code
          type: integer
          example: 400
    LocalDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50
    LoginResponse:
      description: Login Response Object
      required:
      - token
      type: object
      properties:
        token:
          description: JWT Token
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Role:
      enum:
      - USER
      - ADMIN
      type: string
    UserRequest:
      description: User Request Object
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          description: User name
          pattern: \S
          type: string
          example: John Doe
        email:
          description: User email
          pattern: \S
          type: string
          example: jonhdoe@example.com
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/Role"
        password:
          description: "Password must have at least 10 characters, one uppercase letter,\
            \ one lowercase letter, one number and one special character"
          minLength: 10
          pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{10,}$"
          type: string
          example: ab39cD-$d22
    UserResponse:
      description: User Response Object
      required:
      - id
      - name
      - email
      - createdAt
      type: object
      properties:
        id:
          description: User Object Id
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          description: User name
          type: string
          example: John Doe
        email:
          description: User email
          type: string
          example: jonhdoe@example.com
        createdAt:
          description: User creation date
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
          example: 2024-08-14T11:43:42.63617
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT

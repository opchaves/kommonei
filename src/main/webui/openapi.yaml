---
openapi: 3.0.3
info:
  title: KomMonei Antd Monorepo
  description: Quarkus monorepo demonstrating Panache Mongo REST server with AntD
    UI client
  contact:
    name: Paulo Chaves
    url: https://opchaves.com
    email: opaulochaves@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
paths:
  /api/activities:
    get:
      tags:
      - Activity Resource
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Activity Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/activities/{id}:
    put:
      tags:
      - Activity Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Activity Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/auth/login:
    post:
      tags:
      - Auth Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /api/auth/register:
    post:
      tags:
      - Auth Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /api/posts:
    get:
      tags:
      - Post Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
    post:
      tags:
      - Post Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /api/secured:
    get:
      tags:
      - Token Secured Resource
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/secured/allowed:
    get:
      tags:
      - Token Secured Resource
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/users/me:
    get:
      tags:
      - User Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /api/users/{id}:
    get:
      tags:
      - User Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /hello:
    get:
      tags:
      - Greeting Resource
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /q/health:
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    description: MicroProfile Health Endpoint
    get:
      tags:
      - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      description: Check the health of the application
      operationId: microprofile_health_root
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
  /q/health/live:
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    description: MicroProfile Health - Liveness Endpoint
    get:
      tags:
      - MicroProfile Health
      summary: The Liveness check of this application
      description: Check the liveness of the application
      operationId: microprofile_health_liveness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
  /q/health/ready:
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    description: MicroProfile Health - Readiness Endpoint
    get:
      tags:
      - MicroProfile Health
      summary: The Readiness check of this application
      description: Check the readiness of the application
      operationId: microprofile_health_readiness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
  /q/health/started:
    summary: Startup checks are an used to tell when the application has started
    description: MicroProfile Health - Startup Endpoint
    get:
      tags:
      - MicroProfile Health
      summary: The Startup check of this application
      description: Check the startup of the application
      operationId: microprofile_health_startup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
components:
  schemas:
    ActivityRequest:
      description: Activity request
      required:
      - name
      - category
      type: object
      properties:
        name:
          pattern: \S
          type: string
        description:
          type: string
        price:
          format: double
          default: 0.0
          type: number
        paid:
          default: false
          type: boolean
        category:
          pattern: \S
          type: string
        handledAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
    ActivityResponse:
      description: Activity Response Object
      required:
      - id
      - name
      - description
      - price
      - paid
      - category
      - userId
      - handledAt
      - createdAt
      - updatedAt
      type: object
      properties:
        id:
          description: Activity Object Id
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          description: Activity name
          type: string
        description:
          description: Activity description
          type: string
        price:
          format: double
          description: Activity price
          type: number
        paid:
          description: Activity payment status
          type: boolean
        category:
          description: Activity category
          type: string
        userId:
          description: User Object Id
          type: string
        handledAt:
          description: Activity handling date
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
        createdAt:
          description: Activity creation date
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
        updatedAt:
          description: Activity update date
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
    AuthRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          description: User email
          pattern: \S
          type: string
          example: jonhdoe@example.com
        password:
          description: "Password must have at least 10 characters, one uppercase letter,\
            \ one lowercase letter, one number and one special character"
          minLength: 10
          pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{10,}$"
          type: string
          example: ab39cD-$d22
    AuthResponse:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          example: eyJhbGci...
    ErrorResponse:
      required:
      - message
      - status
      type: object
      properties:
        message:
          description: Error message
          type: string
          example: Email already taken
        status:
          format: int32
          description: HTTP status code
          type: integer
          example: 400
    LocalDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50
    LoginResponse:
      description: Login Response Object
      required:
      - token
      type: object
      properties:
        token:
          description: JWT Token
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Post:
      description: Entity that represents a post.
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        creationDate:
          type: string
    PostRequest:
      required:
      - title
      - content
      type: object
      properties:
        title:
          minLength: 1
          type: string
        content:
          minLength: 1
          type: string
        author:
          type: string
    Role:
      enum:
      - USER
      - ADMIN
      type: string
    UserRequest:
      description: User Request Object
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          description: User name
          pattern: \S
          type: string
          example: John Doe
        email:
          description: User email
          pattern: \S
          type: string
          example: jonhdoe@example.com
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/Role"
        password:
          description: "Password must have at least 10 characters, one uppercase letter,\
            \ one lowercase letter, one number and one special character"
          minLength: 10
          pattern: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{10,}$"
          type: string
          example: ab39cD-$d22
    UserResponse:
      description: User Response Object
      required:
      - id
      - name
      - email
      - createdAt
      type: object
      properties:
        id:
          description: User Object Id
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          description: User name
          type: string
          example: John Doe
        email:
          description: User email
          type: string
          example: jonhdoe@example.com
        createdAt:
          description: User creation date
          type: string
          allOf:
          - $ref: "#/components/schemas/LocalDateTime"
          example: 2024-08-14T11:43:42.63617
    HealthCheckResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
        name:
          type: string
        status:
          $ref: "#/components/schemas/HealthCheckStatus"
    HealthCheckStatus:
      enum:
      - DOWN
      - UP
      type: string
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT

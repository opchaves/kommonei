/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import type { HealthCheckResponse } from '../../models';
import { useAxiosMutator } from '../../../AxiosMutator';
import type { ErrorType } from '../../../AxiosMutator';

/**
 * Check the health of the application
 * @summary An aggregated view of the Liveness, Readiness and Startup of this application
 */
export const useMicroprofileHealthRootHook = () => {
  const microprofileHealthRoot = useAxiosMutator<HealthCheckResponse>();

  return useCallback(
    (signal?: AbortSignal) => {
      return microprofileHealthRoot({ url: `/q/health`, method: 'GET', signal });
    },
    [microprofileHealthRoot],
  );
};

export const getMicroprofileHealthRootQueryKey = () => {
  return [`/q/health`] as const;
};

export const useMicroprofileHealthRootQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMicroprofileHealthRootQueryKey();

  const microprofileHealthRoot = useMicroprofileHealthRootHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>
  > = ({ signal }) => microprofileHealthRoot(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MicroprofileHealthRootQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>
>;
export type MicroprofileHealthRootQueryError = ErrorType<HealthCheckResponse>;

export function useMicroprofileHealthRoot<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthRoot<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthRoot<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary An aggregated view of the Liveness, Readiness and Startup of this application
 */

export function useMicroprofileHealthRoot<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthRootHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useMicroprofileHealthRootQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check the liveness of the application
 * @summary The Liveness check of this application
 */
export const useMicroprofileHealthLivenessHook = () => {
  const microprofileHealthLiveness = useAxiosMutator<HealthCheckResponse>();

  return useCallback(
    (signal?: AbortSignal) => {
      return microprofileHealthLiveness({ url: `/q/health/live`, method: 'GET', signal });
    },
    [microprofileHealthLiveness],
  );
};

export const getMicroprofileHealthLivenessQueryKey = () => {
  return [`/q/health/live`] as const;
};

export const useMicroprofileHealthLivenessQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMicroprofileHealthLivenessQueryKey();

  const microprofileHealthLiveness = useMicroprofileHealthLivenessHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>
  > = ({ signal }) => microprofileHealthLiveness(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MicroprofileHealthLivenessQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>
>;
export type MicroprofileHealthLivenessQueryError = ErrorType<HealthCheckResponse>;

export function useMicroprofileHealthLiveness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthLiveness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthLiveness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary The Liveness check of this application
 */

export function useMicroprofileHealthLiveness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthLivenessHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useMicroprofileHealthLivenessQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check the readiness of the application
 * @summary The Readiness check of this application
 */
export const useMicroprofileHealthReadinessHook = () => {
  const microprofileHealthReadiness = useAxiosMutator<HealthCheckResponse>();

  return useCallback(
    (signal?: AbortSignal) => {
      return microprofileHealthReadiness({ url: `/q/health/ready`, method: 'GET', signal });
    },
    [microprofileHealthReadiness],
  );
};

export const getMicroprofileHealthReadinessQueryKey = () => {
  return [`/q/health/ready`] as const;
};

export const useMicroprofileHealthReadinessQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMicroprofileHealthReadinessQueryKey();

  const microprofileHealthReadiness = useMicroprofileHealthReadinessHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>
  > = ({ signal }) => microprofileHealthReadiness(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MicroprofileHealthReadinessQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>
>;
export type MicroprofileHealthReadinessQueryError = ErrorType<HealthCheckResponse>;

export function useMicroprofileHealthReadiness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthReadiness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthReadiness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary The Readiness check of this application
 */

export function useMicroprofileHealthReadiness<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthReadinessHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useMicroprofileHealthReadinessQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check the startup of the application
 * @summary The Startup check of this application
 */
export const useMicroprofileHealthStartupHook = () => {
  const microprofileHealthStartup = useAxiosMutator<HealthCheckResponse>();

  return useCallback(
    (signal?: AbortSignal) => {
      return microprofileHealthStartup({ url: `/q/health/started`, method: 'GET', signal });
    },
    [microprofileHealthStartup],
  );
};

export const getMicroprofileHealthStartupQueryKey = () => {
  return [`/q/health/started`] as const;
};

export const useMicroprofileHealthStartupQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMicroprofileHealthStartupQueryKey();

  const microprofileHealthStartup = useMicroprofileHealthStartupHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>
  > = ({ signal }) => microprofileHealthStartup(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MicroprofileHealthStartupQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>
>;
export type MicroprofileHealthStartupQueryError = ErrorType<HealthCheckResponse>;

export function useMicroprofileHealthStartup<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthStartup<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useMicroprofileHealthStartup<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary The Startup check of this application
 */

export function useMicroprofileHealthStartup<
  TData = Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
  TError = ErrorType<HealthCheckResponse>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useMicroprofileHealthStartupHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useMicroprofileHealthStartupQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

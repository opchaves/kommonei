/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import { HealthCheckStatus } from '../../models';
import type { HealthCheckResponse } from '../../models';

export const getMicroprofileHealthRootResponseMock = (
  overrideResponse: Partial<HealthCheckResponse> = {},
): HealthCheckResponse => ({
  data: faker.helpers.arrayElement([{}, undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(HealthCheckStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMicroprofileHealthLivenessResponseMock = (
  overrideResponse: Partial<HealthCheckResponse> = {},
): HealthCheckResponse => ({
  data: faker.helpers.arrayElement([{}, undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(HealthCheckStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMicroprofileHealthReadinessResponseMock = (
  overrideResponse: Partial<HealthCheckResponse> = {},
): HealthCheckResponse => ({
  data: faker.helpers.arrayElement([{}, undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(HealthCheckStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMicroprofileHealthStartupResponseMock = (
  overrideResponse: Partial<HealthCheckResponse> = {},
): HealthCheckResponse => ({
  data: faker.helpers.arrayElement([{}, undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(HealthCheckStatus)),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMicroprofileHealthRootMockHandler = (
  overrideResponse?:
    | HealthCheckResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthCheckResponse> | HealthCheckResponse),
) => {
  return http.get('*/q/health', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getMicroprofileHealthRootResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getMicroprofileHealthLivenessMockHandler = (
  overrideResponse?:
    | HealthCheckResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthCheckResponse> | HealthCheckResponse),
) => {
  return http.get('*/q/health/live', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getMicroprofileHealthLivenessResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getMicroprofileHealthReadinessMockHandler = (
  overrideResponse?:
    | HealthCheckResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthCheckResponse> | HealthCheckResponse),
) => {
  return http.get('*/q/health/ready', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getMicroprofileHealthReadinessResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getMicroprofileHealthStartupMockHandler = (
  overrideResponse?:
    | HealthCheckResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthCheckResponse> | HealthCheckResponse),
) => {
  return http.get('*/q/health/started', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getMicroprofileHealthStartupResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getMicroprofileHealthMock = () => [
  getMicroprofileHealthRootMockHandler(),
  getMicroprofileHealthLivenessMockHandler(),
  getMicroprofileHealthReadinessMockHandler(),
  getMicroprofileHealthStartupMockHandler(),
];

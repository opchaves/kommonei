/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import { useAxiosMutator } from '../../../AxiosMutator';
import type { ErrorType } from '../../../AxiosMutator';

export const useGetApiSecuredHook = () => {
  const getApiSecured = useAxiosMutator<string>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiSecured({ url: `/api/secured`, method: 'GET', signal });
    },
    [getApiSecured],
  );
};

export const getGetApiSecuredQueryKey = () => {
  return [`/api/secured`] as const;
};

export const useGetApiSecuredQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiSecuredQueryKey();

  const getApiSecured = useGetApiSecuredHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>> = ({
    signal,
  }) => getApiSecured(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiSecuredQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>
>;
export type GetApiSecuredQueryError = ErrorType<unknown>;

export function useGetApiSecured<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSecured<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSecured<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiSecured<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiSecuredHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiSecuredQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetApiSecuredAllowedHook = () => {
  const getApiSecuredAllowed = useAxiosMutator<string>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiSecuredAllowed({ url: `/api/secured/allowed`, method: 'GET', signal });
    },
    [getApiSecuredAllowed],
  );
};

export const getGetApiSecuredAllowedQueryKey = () => {
  return [`/api/secured/allowed`] as const;
};

export const useGetApiSecuredAllowedQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiSecuredAllowedQueryKey();

  const getApiSecuredAllowed = useGetApiSecuredAllowedHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>
  > = ({ signal }) => getApiSecuredAllowed(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiSecuredAllowedQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>
>;
export type GetApiSecuredAllowedQueryError = ErrorType<void>;

export function useGetApiSecuredAllowed<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSecuredAllowed<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSecuredAllowed<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiSecuredAllowed<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiSecuredAllowedHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiSecuredAllowedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

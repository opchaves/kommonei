/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import { ActivityType } from '../../models';
import type { ActivityDTO } from '../../models';

export const getGetApiActivitiesResponseMock = (
  overrideResponse: Partial<ActivityDTO> = {},
): ActivityDTO => ({
  category: faker.helpers.fromRegExp('S'),
  createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  handledAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.fromRegExp('S'),
  paid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  price: faker.helpers.arrayElement([faker.number.int({ min: 0.01, max: undefined }), undefined]),
  type: faker.helpers.arrayElement(Object.values(ActivityType)),
  updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetApiActivitiesAllResponseMock = (): ActivityDTO[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    category: faker.helpers.fromRegExp('S'),
    createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    handledAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.helpers.fromRegExp('S'),
    paid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    price: faker.helpers.arrayElement([faker.number.int({ min: 0.01, max: undefined }), undefined]),
    type: faker.helpers.arrayElement(Object.values(ActivityType)),
    updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    userId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetApiActivitiesIdResponseMock = (
  overrideResponse: Partial<ActivityDTO> = {},
): ActivityDTO => ({
  category: faker.helpers.fromRegExp('S'),
  createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  handledAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.fromRegExp('S'),
  paid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  price: faker.helpers.arrayElement([faker.number.int({ min: 0.01, max: undefined }), undefined]),
  type: faker.helpers.arrayElement(Object.values(ActivityType)),
  updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getPutApiActivitiesIdResponseMock = (
  overrideResponse: Partial<ActivityDTO> = {},
): ActivityDTO => ({
  category: faker.helpers.fromRegExp('S'),
  createdAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  handledAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.fromRegExp('S'),
  paid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  price: faker.helpers.arrayElement([faker.number.int({ min: 0.01, max: undefined }), undefined]),
  type: faker.helpers.arrayElement(Object.values(ActivityType)),
  updatedAt: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetApiActivitiesMockHandler = (
  overrideResponse?:
    | ActivityDTO
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ActivityDTO> | ActivityDTO),
) => {
  return http.get('*/api/activities', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiActivitiesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostApiActivitiesMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.post('*/api/activities', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetApiActivitiesAllMockHandler = (
  overrideResponse?:
    | ActivityDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ActivityDTO[]> | ActivityDTO[]),
) => {
  return http.get('*/api/activities/all', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiActivitiesAllResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetApiActivitiesIdMockHandler = (
  overrideResponse?:
    | ActivityDTO
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ActivityDTO> | ActivityDTO),
) => {
  return http.get('*/api/activities/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiActivitiesIdResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPutApiActivitiesIdMockHandler = (
  overrideResponse?:
    | ActivityDTO
    | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ActivityDTO> | ActivityDTO),
) => {
  return http.put('*/api/activities/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPutApiActivitiesIdResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getActivitiesMock = () => [
  getGetApiActivitiesMockHandler(),
  getPostApiActivitiesMockHandler(),
  getGetApiActivitiesAllMockHandler(),
  getGetApiActivitiesIdMockHandler(),
  getPutApiActivitiesIdMockHandler(),
];

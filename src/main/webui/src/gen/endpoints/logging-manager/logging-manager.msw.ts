/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import { LoggerLevel } from '../../models';
import type { LoggerInfo, LoggerLevel } from '../../models';

export const getLoggingManagerGetAllResponseMock = (): LoggerInfo[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    configuredLevel: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(LoggerLevel)),
      undefined,
    ]),
    effectiveLevel: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(LoggerLevel)),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getLoggingManagerLevelsResponseMock = (): LoggerLevel[] =>
  faker.helpers.arrayElements(Object.values(LoggerLevel));

export const getLoggingManagerGetAllMockHandler = (
  overrideResponse?:
    | LoggerInfo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoggerInfo[]> | LoggerInfo[]),
) => {
  return http.get('*/q/logging-manager', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getLoggingManagerGetAllResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getLoggingManagerUpdateMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post('*/q/logging-manager', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getLoggingManagerLevelsMockHandler = (
  overrideResponse?:
    | LoggerLevel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoggerLevel[]> | LoggerLevel[]),
) => {
  return http.get('*/q/logging-manager/levels', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getLoggingManagerLevelsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getLoggingManagerMock = () => [
  getLoggingManagerGetAllMockHandler(),
  getLoggingManagerUpdateMockHandler(),
  getLoggingManagerLevelsMockHandler(),
];

/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { Post } from '../../models';

export const getGetApiPostsResponseMock = (): Post[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    content: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    creationDate: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      {
        counter: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        date: faker.helpers.arrayElement([
          faker.date.past().toISOString().split('T')[0],
          undefined,
        ]),
        randomValue1: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        randomValue2: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        timestamp: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
      undefined,
    ]),
    title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetApiPostsMockHandler = (
  overrideResponse?:
    | Post[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Post[]> | Post[]),
) => {
  return http.get('*/api/posts', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiPostsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostApiPostsMockHandler = (
  overrideResponse?:
    | unknown
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown),
) => {
  return http.post('*/api/posts', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getPostResourceMock = () => [
  getGetApiPostsMockHandler(),
  getPostApiPostsMockHandler(),
];

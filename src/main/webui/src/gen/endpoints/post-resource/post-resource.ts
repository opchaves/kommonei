/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import type { Post, PostRequest } from '../../models';
import { useAxiosMutator } from '../../../AxiosMutator';
import type { ErrorType } from '../../../AxiosMutator';

export const useGetApiPostsHook = () => {
  const getApiPosts = useAxiosMutator<Post[]>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiPosts({ url: `/api/posts`, method: 'GET', signal });
    },
    [getApiPosts],
  );
};

export const getGetApiPostsQueryKey = () => {
  return [`/api/posts`] as const;
};

export const useGetApiPostsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPostsQueryKey();

  const getApiPosts = useGetApiPostsHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>> = ({
    signal,
  }) => getApiPosts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiPostsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>
>;
export type GetApiPostsQueryError = ErrorType<unknown>;

export function useGetApiPosts<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPosts<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiPosts<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiPosts<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPostsHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiPostsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usePostApiPostsHook = () => {
  const postApiPosts = useAxiosMutator<unknown>();

  return useCallback(
    (postRequest: PostRequest) => {
      return postApiPosts({
        url: `/api/posts`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postRequest,
      });
    },
    [postApiPosts],
  );
};

export const usePostApiPostsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>,
    TError,
    { data: PostRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>,
  TError,
  { data: PostRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiPosts = usePostApiPostsHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>,
    { data: PostRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPosts(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPostsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>
>;
export type PostApiPostsMutationBody = PostRequest;
export type PostApiPostsMutationError = ErrorType<unknown>;

export const usePostApiPosts = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>,
    TError,
    { data: PostRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiPostsHook>>>,
  TError,
  { data: PostRequest },
  TContext
> => {
  const mutationOptions = usePostApiPostsMutationOptions(options);

  return useMutation(mutationOptions);
};

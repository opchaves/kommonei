/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import type { UserResponse } from '../../models';
import { useAxiosMutator } from '../../../AxiosMutator';
import type { ErrorType } from '../../../AxiosMutator';

export const useGetApiUsersMeHook = () => {
  const getApiUsersMe = useAxiosMutator<unknown>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiUsersMe({ url: `/api/users/me`, method: 'GET', signal });
    },
    [getApiUsersMe],
  );
};

export const getGetApiUsersMeQueryKey = () => {
  return [`/api/users/me`] as const;
};

export const useGetApiUsersMeQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersMeQueryKey();

  const getApiUsersMe = useGetApiUsersMeHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>> = ({
    signal,
  }) => getApiUsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersMeQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>
>;
export type GetApiUsersMeQueryError = ErrorType<void>;

export function useGetApiUsersMe<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersMe<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersMe<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiUsersMe<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersMeHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetApiUsersIdHook = () => {
  const getApiUsersId = useAxiosMutator<UserResponse>();

  return useCallback(
    (id: string, signal?: AbortSignal) => {
      return getApiUsersId({ url: `/api/users/${id}`, method: 'GET', signal });
    },
    [getApiUsersId],
  );
};

export const getGetApiUsersIdQueryKey = (id: string) => {
  return [`/api/users/${id}`] as const;
};

export const useGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const getApiUsersId = useGetApiUsersIdHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>> = ({
    signal,
  }) => getApiUsersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>
>;
export type GetApiUsersIdQueryError = ErrorType<void>;

export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<void>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

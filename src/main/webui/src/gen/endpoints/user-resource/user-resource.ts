/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * KomMonei Antd Monorepo
 * Quarkus monorepo demonstrating Panache Mongo REST server with AntD UI client
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import type { AuthRequest, UserRequest, UserResponse } from '../../models';
import { useAxiosMutator } from '../../../AxiosMutator';
import type { ErrorType } from '../../../AxiosMutator';

export const usePostApiUsersLoginHook = () => {
  const postApiUsersLogin = useAxiosMutator<unknown>();

  return useCallback(
    (authRequest: AuthRequest) => {
      return postApiUsersLogin({
        url: `/api/users/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: authRequest,
      });
    },
    [postApiUsersLogin],
  );
};

export const usePostApiUsersLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>,
    TError,
    { data: AuthRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>,
  TError,
  { data: AuthRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiUsersLogin = usePostApiUsersLoginHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>,
    { data: AuthRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsersLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersLoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>
>;
export type PostApiUsersLoginMutationBody = AuthRequest;
export type PostApiUsersLoginMutationError = ErrorType<unknown>;

export const usePostApiUsersLogin = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>,
    TError,
    { data: AuthRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersLoginHook>>>,
  TError,
  { data: AuthRequest },
  TContext
> => {
  const mutationOptions = usePostApiUsersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usePostApiUsersRegisterHook = () => {
  const postApiUsersRegister = useAxiosMutator<unknown>();

  return useCallback(
    (userRequest: UserRequest) => {
      return postApiUsersRegister({
        url: `/api/users/register`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userRequest,
      });
    },
    [postApiUsersRegister],
  );
};

export const usePostApiUsersRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>,
    TError,
    { data: UserRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>,
  TError,
  { data: UserRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiUsersRegister = usePostApiUsersRegisterHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>,
    { data: UserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsersRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>
>;
export type PostApiUsersRegisterMutationBody = UserRequest;
export type PostApiUsersRegisterMutationError = ErrorType<unknown>;

export const usePostApiUsersRegister = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>,
    TError,
    { data: UserRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiUsersRegisterHook>>>,
  TError,
  { data: UserRequest },
  TContext
> => {
  const mutationOptions = usePostApiUsersRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const useGetApiUsersIdHook = () => {
  const getApiUsersId = useAxiosMutator<UserResponse>();

  return useCallback(
    (id: string, signal?: AbortSignal) => {
      return getApiUsersId({ url: `/api/users/${id}`, method: 'GET', signal });
    },
    [getApiUsersId],
  );
};

export const getGetApiUsersIdQueryKey = (id: string) => {
  return [`/api/users/${id}`] as const;
};

export const useGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const getApiUsersId = useGetApiUsersIdHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>> = ({
    signal,
  }) => getApiUsersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>
>;
export type GetApiUsersIdQueryError = ErrorType<unknown>;

export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiUsersId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
